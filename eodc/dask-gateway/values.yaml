dask-gateway:
  gateway:
    image:
      name: ghcr.io/eodcgmbh/container-images/dask-gateway-server-jwt
      tag: 2025.8.0
      pullPolicy: Always
    backend:
      image:
        pullPolicy: Always
    extraConfig: |
      01-global-cluster-config: |
        import uuid
        from dask_gateway_server.backends.kubernetes import KubeBackend

        class ExtendedKubeBackend(KubeBackend):
            def __init__(self, **kwargs):
                super().__init__(**kwargs)
                self.log.info("[ExtendedKubeBackend] Initialized custom backend")

            async def start_cluster(self, user, cluster_options):
                options, config = await self.process_cluster_options(user, cluster_options)
                    
                labels = { 
                  "eodc.dask/username": user.name,
                  "eodc.dask/group": list(user.groups)[0]
                }
                config.scheduler_extra_pod_labels = labels
                config.worker_extra_pod_labels = labels

                obj = self.make_cluster_object(user.name, options, config)
                name = obj["metadata"]["name"]
                cluster_name = f"{config.namespace}.{name}"

                self.log.info("[ExtendedKubeBackend] Creating labelled cluster %s for user %s", cluster_name, user.name)

                await self.custom_client.create_namespaced_custom_object(
                    "gateway.dask.org", self.crd_version, config.namespace, "daskclusters", obj
                )
                return cluster_name


        c.DaskGateway.backend_class = ExtendedKubeBackend

  controller:
    image:
      name: ghcr.io/eodcgmbh/container-images/dask-gateway-server-jwt
      tag: 2025.8.0
      pullPolicy: Always
